{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","todoList","setTodoList","id","title","completed","activeItem","setActiveItem","editing","setEditing","useEffect","fetchTasks","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","console","log","fetch","then","response","json","data","className","onSubmit","e","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","handleSubmit","style","flex","onChange","target","value","handleChange","type","placeholder","map","task","index","key","onClick","strikeUnstrike","startEdit","deleteItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eb8aaef1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst App=() => {\n    const [todoList, setTodoList]=useState([])\n    const [activeItem, setActiveItem]=useState({id: null, title: '', completed: false})\n    const [editing, setEditing]=useState(false)\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        fetchTasks()\n    }, []);\n\n   const getCookie=(name) => {\n        var cookieValue=null;\n        if (document.cookie&&document.cookie!=='') {\n            var cookies=document.cookie.split(';');\n            for (var i=0; i<cookies.length; i++) {\n                var cookie=cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length+1)===(name+'=')) {\n                    cookieValue=decodeURIComponent(cookie.substring(name.length+1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n    const fetchTasks=() => {\n        console.log('Fetching...')\n        fetch('http://127.0.0.1:8000/api/task-list/')\n            .then(response => response.json())\n            .then(data => \n                    setTodoList(data)\n            )\n    }\n\n    const startEdit=(task) => {\n        setActiveItem(task)\n        setEditing(true)\n    }\n\n\n    const deleteItem=(task) => {\n        var csrftoken=getCookie('csrftoken')\n\n        fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': csrftoken,\n            },\n        }).then((response) => {\n            fetchTasks()\n        })\n    }\n\n    const strikeUnstrike =(task) =>{\n        task.completed=!task.completed\n        var csrftoken=getCookie('csrftoken')\n        var url=`http://127.0.0.1:8000/api/task-update/${task.id}/`\n\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': csrftoken,\n            },\n            body: JSON.stringify({'completed': task.completed, 'title': task.title})\n        }).then(() => {\n            fetchTasks()\n        })\n\n        console.log('TASK:', task.completed)\n    }\n\n    const handleSubmit=(e) => {\n        e.preventDefault()\n        console.log('ITEM:', activeItem)\n\n        var csrftoken=getCookie('csrftoken')\n\n        var url='http://127.0.0.1:8000/api/task-create/'\n\n        if (editing) {\n            url=`http://127.0.0.1:8000/api/task-update/${activeItem.id}/`\n            setEditing(false)\n        }\n\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': csrftoken,\n            },\n            body: JSON.stringify(activeItem)\n        }).then((response) => {\n            fetchTasks()\n            setActiveItem({\n                id: null,\n                title: '',\n                completed: false,\n            })\n        }).catch(function (error) {\n            console.log('ERROR:', error)\n        })\n    }\n\n    const handleChange=(e) => {\n        console.log('called handleChange')\n        e.preventDefault()\n        var name=e.target.name\n        var value=e.target.value\n        console.log('Name:', name)\n        console.log('Value:', value)\n        setActiveItem({...activeItem, title:value})\n\n    }\n\n    return (\n        <div className=\"container\">\n            <div id=\"task-container\">\n                <div id=\"form-wrapper\">\n                    <form onSubmit={(e) => handleSubmit(e)} id=\"form\">\n                        <div className=\"flex-wrapper\">\n                            <div style={{flex: 6}}>\n                                <input onChange={(e) => handleChange(e)} className=\"form-control\" id=\"title\" value={activeItem.title} type=\"text\" name=\"title\" placeholder=\"Add task..\" />\n                            </div>\n\n                            <div style={{flex: 1}}>\n                                <input id=\"submit\" className=\"btn btn-warning\" type=\"submit\" name=\"Add\" />\n                            </div>\n                        </div>\n                    </form>\n\n                </div>\n\n                <div id=\"list-wrapper\">\n                    {todoList.map(function (task, index) {\n                        return (\n                            <div key={index} className=\"task-wrapper flex-wrapper\">\n\n                                <div onClick={() => strikeUnstrike(task)} style={{flex: 7}}>\n\n                                    {task.completed===false? (\n                                        <span>{task.title}</span>\n\n                                    ):(\n\n                                            <strike>{task.title}</strike>\n                                        )}\n\n                                </div>\n\n                                <div style={{flex: 1}}>\n                                    <button onClick={() => startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n                                </div>\n\n                                <div style={{flex: 1}}>\n                                    <button onClick={() => deleteItem(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\n                                </div>\n\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}